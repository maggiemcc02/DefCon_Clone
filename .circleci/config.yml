# To run locally:
# circleci local execute --job build
version: 2.1
jobs:
  build:
    docker:
      - image: firedrakeproject/firedrake
        user: firedrake
    working_directory: /home/firedrake/defcon
    steps:
      - checkout

      - run:
          name: Environment and firedrake version info
          command: |
            source /home/firedrake/firedrake/bin/activate
            firedrake-status

      - run:
          name: Install defcon
          command: |
            source /home/firedrake/firedrake/bin/activate
            ls
            pip install .

      - run:
          name: Import defcon first time (JIT)
          command: |
            source /home/firedrake/firedrake/bin/activate
            python -c"import defcon"

      - run:
          name: Run tests
          command: |
            set +e
            mkdir -p /tmp/circle
            source /home/firedrake/firedrake/bin/activate
            pip install pytest-timeout
            mpiexec -n 1 bash -c '
              python3 -m pytest -vl \
              --timeout=600 --timeout-method=thread -o faulthandler_timeout=660 \
              --junitxml /tmp/circle/report-${OMPI_COMM_WORLD_RANK:-$PMI_RANK}.xml examples/firedrake/poisson
            '
            mpiexec -n 2 bash -c '
              python3 -m pytest -vl \
              --timeout=600 --timeout-method=thread -o faulthandler_timeout=660 \
              --junitxml /tmp/circle/report-${OMPI_COMM_WORLD_RANK:-$PMI_RANK}.xml defcon/ examples/firedrake
            '
            rc=$?
            find -name "*.pdf" -exec cp --parents {} /tmp/circle \;
            exit $rc
          timeout: 2400
      - store_artifacts:
          path: /tmp/circle
          destination: build

      - store_test_results:
          path: /tmp/circle

  docker:
    machine:
      image: ubuntu-2204:current
    environment:
      IMAGE_NAME: defcon
      VERSION: latest
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: |
            docker build . --file docker/Dockerfile --tag ${IMAGE_NAME}
            docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
      - run:
          name: Upload Docker image
          deployment: Production
          command: |
            echo ${DOCKERHUB_PASSWORD} | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
            docker load --input "${IMAGE_NAME}.tar"
            IMAGE=${DOCKERHUB_USERNAME}/${IMAGE_NAME}
            docker tag "${IMAGE_NAME}" "${IMAGE}:${VERSION}"
            docker push "${IMAGE}:${VERSION}"

workflows:
  version: 2.1
  default-workflow:
    jobs:
      - build
      - docker:
          requires:
            - build
          filters:
            branches:
              only: /master|jackbetteridge/docker_ci/

